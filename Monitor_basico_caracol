//main
public class CursaCargols {
    public static void main(String[] args) {
        Cargol treubanya = new Cargol("Treubanya");
        monitorCargols mTreubanya = new monitorCargols(treubanya);
        Cargol bover = new Cargol("Bover");
        monitorCargols mBover = new monitorCargols(bover);
        ScheduledExecutorService schExService = Executors.newScheduledThreadPool(3);
        schExService.scheduleWithFixedDelay(treubanya, 2, 1, TimeUnit.SECONDS);
        schExService.scheduleWithFixedDelay(bover, 4, 4, TimeUnit.SECONDS);
        schExService.scheduleWithFixedDelay(mTreubanya, 5, 1, TimeUnit.SECONDS);
        schExService.scheduleWithFixedDelay(mBover, 3, 5, TimeUnit.SECONDS);
        // Esperem a que passin els 25s o b√© a que acabin tots
        try {
            schExService.awaitTermination(25, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        schExService.shutdownNow();
        System.out.println("\nTotal "+ treubanya.getNom() + ":" + treubanya.getMetres());
        System.out.println("Total "+ bover.getNom() + ":" + bover.getMetres());
    }
}
//caracol
public class Cargol implements Runnable {
    private String Nom;
    private int metres;
    public Cargol(String nom) {
        Nom = nom;
    }
    public void addMetres(int m) {
        metres += m;
    }
    public String getNom() {
        return Nom;
    }
    public int getMetres() {
        return metres;
    }
    @Override
    public void run() {
        int sprint = (int) Math.floor(Math.random()*50);
        addMetres(sprint);
        System.out.println(Nom + ": he fet " + sprint +" metres");
    }
}

//monitor
public class monitorCargols implements Runnable {
    private Cargol cargol;
    public monitorCargols(Cargol c) {
        cargol = c;
    }
    @Override
    public void run() {
        System.out.println(cargol.getNom()  + " acumula " + cargol.getMetres() + " metres");
    }
}
